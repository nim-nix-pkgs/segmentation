## This library implements Unicode Text Segmentation (tr29)

import macros
import unicode

import unicodedb/segmentation

# Not every state can exit, so this needs backtracking
# Auto generated with github@nitely/regexy
# See ../gen/gen_re_words.nim for the original regex
const wordBreakTable = [
  [-1'i8, 82, 80, 72, 71, 70, 58, 57, 56, 55, 53, 52, 14, 85, 13, 12, 11, 10, 1, 84, 83],
  [0'i8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 7, -1, -1, 2, -1, -1],
  [0'i8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 4, -1, -1],
  [0'i8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 4, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, 47, 49, -1, 46, 50, -1, -1, -1, 48, 14, -1, 14, 14, 51, -1, 15, -1, -1],
  [0'i8, 3, -1, 39, 41, -1, 16, 44, -1, -1, -1, 40, 14, -1, 14, 14, 45, -1, 15, -1, -1],
  [0'i8, -1, -1, 36, -1, -1, 16, -1, -1, -1, 38, 37, 14, -1, 16, 16, -1, -1, 17, -1, -1],
  [0'i8, 3, -1, 18, -1, -1, 16, -1, -1, -1, 30, 29, 14, -1, 16, 16, -1, -1, 17, -1, -1],
  [0'i8, -1, -1, 18, 26, -1, 16, 27, -1, 28, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [0'i8, 3, -1, 18, 20, -1, 16, 24, -1, 25, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [-1'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 20, 20, -1, -1, 20, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 21, 21, -1, -1, 22, -1, -1],
  [0'i8, 3, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 21, 21, -1, -1, 22, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 21, 21, -1, -1, 22, -1, -1],
  [-1'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 20, 20, -1, -1, 20, -1, -1],
  [-1'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 20, 20, -1, -1, 20, -1, -1],
  [-1'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 20, 20, -1, -1, 20, -1, -1],
  [-1'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 20, 20, -1, -1, 20, -1, -1],
  [-1'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 20, 20, -1, -1, 20, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, 31, -1, -1, -1, 30, -1, -1, -1, 35, 34, -1, -1, 33, -1, -1],
  [0'i8, -1, -1, 18, -1, -1, 16, -1, -1, -1, 30, 18, 14, -1, 31, 31, -1, -1, 32, -1, -1],
  [0'i8, 3, -1, 18, -1, -1, 16, -1, -1, -1, 30, 18, 14, -1, 31, 31, -1, -1, 32, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1, 33, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1, 33, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1, 33, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, 31, -1, -1, -1, 30, -1, -1, -1, 33, 33, -1, -1, 33, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 41, 41, -1, -1, 41, -1, -1],
  [0'i8, -1, -1, 18, 41, -1, 16, 41, -1, -1, -1, 18, 14, -1, 42, 42, 41, -1, 43, -1, -1],
  [0'i8, 3, -1, 18, 41, -1, 16, 41, -1, -1, -1, 18, 14, -1, 42, 42, 41, -1, 43, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 41, 41, -1, -1, 41, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 41, 41, -1, -1, 41, -1, -1],
  [0'i8, -1, -1, 18, -1, -1, 16, -1, -1, -1, 30, 18, 14, -1, 16, 16, -1, -1, 17, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 41, 41, -1, -1, 41, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 41, 41, -1, -1, 41, -1, -1],
  [-1'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, 41, 41, -1, -1, 41, -1, -1],
  [0'i8, -1, -1, 18, 20, -1, 16, 20, -1, 20, -1, 18, 14, -1, 18, 18, -1, -1, 19, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, 53, -1, -1, -1, 53, -1, -1, -1, 53, 53, -1, -1, 54, -1, -1],
  [0'i8, 3, -1, -1, -1, -1, 53, -1, -1, -1, 53, -1, -1, -1, 53, 53, -1, -1, 54, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, 18, -1, -1, 58, -1, -1, -1, 59, 18, 14, -1, 58, 58, -1, -1, 69, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, 68, -1, -1, -1, 59, -1, -1, -1, 67, 66, -1, -1, 60, -1, -1],
  [0'i8, 3, -1, -1, -1, -1, 65, -1, -1, -1, 53, -1, -1, -1, 64, 61, -1, -1, 60, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, 62, -1, -1, -1, 53, -1, -1, -1, 61, 61, -1, -1, 60, -1, -1],
  [0'i8, -1, -1, 18, -1, -1, 58, -1, -1, -1, 59, 18, 14, -1, 62, 62, -1, -1, 63, -1, -1],
  [0'i8, 3, -1, 18, -1, -1, 58, -1, -1, -1, 59, 18, 14, -1, 62, 62, -1, -1, 63, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, 62, -1, -1, -1, 53, -1, -1, -1, 61, 61, -1, -1, 60, -1, -1],
  [0'i8, -1, -1, 18, -1, -1, 58, -1, -1, -1, 59, 18, 14, -1, 62, 62, -1, -1, 63, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, 62, -1, -1, -1, 53, -1, -1, -1, 61, 61, -1, -1, 60, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, 62, -1, -1, -1, 53, -1, -1, -1, 61, 61, -1, -1, 60, -1, -1],
  [0'i8, -1, -1, 18, -1, -1, 58, -1, -1, -1, 59, 18, 14, -1, 62, 62, -1, -1, 63, -1, -1],
  [0'i8, 3, -1, 18, -1, -1, 58, -1, -1, -1, 59, 18, 14, -1, 58, 58, -1, -1, 69, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, 18, 79, 73, 16, 20, -1, 20, -1, 18, 14, -1, 72, 72, -1, -1, 76, -1, -1],
  [-1'i8, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 73, -1, -1, 73, -1, -1],
  [0'i8, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, -1, -1, 75, -1, -1],
  [0'i8, 3, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, -1, -1, 75, -1, -1],
  [0'i8, 3, -1, 18, 77, 73, 16, 20, -1, 20, -1, 18, 14, -1, 72, 72, -1, -1, 76, -1, -1],
  [0'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 77, 77, -1, -1, 78, -1, -1],
  [0'i8, 3, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 77, 77, -1, -1, 78, -1, -1],
  [0'i8, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, 77, 77, -1, -1, 78, -1, -1],
  [0'i8, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 80, -1, -1, 81, -1, -1],
  [0'i8, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 80, -1, -1, 81, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, 2, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83],
  [0'i8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]

func genWordBreakMap(prop: NimNode): NimNode =
  ## Gen mapping from word-break prop to DFA column
  # from gen/gen_re_words.nim
  const idnts = [
    "__EOF__",  # Reserved for the DFA
    "Extended_Pictographic",
    "RegionalIndicator",
    "Hebrew_Letter",
    "Single_Quote",
    "Double_Quote",
    "ExtendNumLet",
    "MidNumLet",
    #"MidNumLetQ",
    "WSegSpace",
    "MidLetter",
    "Katakana",
    "ALetter",
    #"AHLetter",
    "Numeric",
    "Newline",
    "Extend",
    "Format",
    "MidNum",
    "Other",
    "ZWJ",
    "CR",
    "LF"
  ]
  var caseStmt: seq[NimNode]
  caseStmt.add(prop)
  for i in 1 .. idnts.len-1:
    caseStmt.add(newTree(nnkOfBranch,
      ident("sgw" & idnts[i]),
      newLit i))
  let falseLit = newLit false
  let badResultLit = newLit -1
  caseStmt.add(newTree(nnkElse,
    quote do:
      doAssert `falseLit`
      `badResultLit`))
  result = newStmtList(
    newTree(nnkCaseStmt, caseStmt))

macro genWordBreakMap(prop: SgWord): untyped =
  result = genWordBreakMap(prop)
  when defined(reDumpWrodBreak):
    echo "==== genWordBreakMap ===="
    echo repr(result)

# XXX wordBounds (not words)
iterator wordsBounds*(s: string): Slice[int] {.inline.} =
  ## Return each word boundary in `s`. Boundaries are inclusive
  var
    state, a, b, c = 0
    r: Rune
  while b < s.len:
    state = 0
    while true:
      fastRuneAt(s, b, r, true)
      let prop = genWordBreakMap(wordBreakProp(r))
      let next = wordBreakTable[state][prop]
      if next == -1:
        doAssert state > 0
        b = c
        break
      # save point
      if wordBreakTable[next][0] == 0:
        c = b
      if b >= s.len:
        b = c
        break
      state = next
    doAssert b > a
    yield a .. b-1
    a = b

iterator words*(s: string): string {.inline.} =
  ## Return each word in `s`
  for b in s.wordsBounds:
    yield s[b]

when isMainModule:
  block:
    echo "Test genWordBreakMap"
    var i = 0
    for cp in 0 .. 0x10FFFF:
      doAssert genWordBreakMap(wordBreakProp(Rune(cp))) >= 0
      inc i
    doAssert i == 0x10FFFF+1
